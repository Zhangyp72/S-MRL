import torch
from SpikingNeuronModel import SRMCell
import torch.nn as nn
class SRMRecurrentNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(SRMRecurrentNetwork, self).__init__()
        self.recurrent = SRMCell(input_size, hidden_size)
        self.fc = nn.Linear(hidden_size, output_size)
    def forward(self, x):
        """
        x: [batch_size, seq_len, input_size]
        """
        batch_size, seq_len, _ = x.shape
        outputs = []
        state = None  
        for t in range(seq_len):
            out, state = self.recurrent(x[:, t, :], state)
            outputs.append(out)
        out = torch.stack(outputs, dim=1)  
        out = self.fc(out[:, -1, :])  
        return out
input_size = 64 * 64
hidden_size = 256
output_size = 10  
seq_len = 100  
model = SRMRecurrentNetwork(input_size, hidden_size, output_size)
test_input = torch.rand((1, seq_len, input_size))  
output = model(test_input)
print("model output:", output.shape)  
